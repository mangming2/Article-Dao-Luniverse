/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace Article_DAO {
  export type WriterStruct = {
    _address: PromiseOrValue<string>;
    twitterHandle: PromiseOrValue<string>;
  };

  export type WriterStructOutput = [string, string] & {
    _address: string;
    twitterHandle: string;
  };
}

export interface Article_DAOInterface extends utils.Interface {
  functions: {
    "ARTICLEREGISTRATIONEXPIRY()": FunctionFragment;
    "CHALLEGEEXPIRY()": FunctionFragment;
    "DECIMALS()": FunctionFragment;
    "PARTICIPATIONEXPIRY()": FunctionFragment;
    "REGISTRATIONDEPOSIT()": FunctionFragment;
    "VOTINGEXPIRY()": FunctionFragment;
    "_pi_quorum()": FunctionFragment;
    "aVoteParticipate(uint256,uint256)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "articleRegister(uint256,string)": FunctionFragment;
    "articles(uint256,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "canclaima(uint256)": FunctionFragment;
    "canclaimw(uint256)": FunctionFragment;
    "challenge(uint256)": FunctionFragment;
    "change(uint256)": FunctionFragment;
    "claimRewardA(uint256,uint256)": FunctionFragment;
    "claimRewardW(uint256)": FunctionFragment;
    "claimW(uint256)": FunctionFragment;
    "decimals()": FunctionFragment;
    "getProposal(uint256)": FunctionFragment;
    "getWregister(uint256)": FunctionFragment;
    "getarticle(uint256,uint256)": FunctionFragment;
    "getarticlenum(uint256)": FunctionFragment;
    "getproposalnum()": FunctionFragment;
    "getregisternum()": FunctionFragment;
    "members(address)": FunctionFragment;
    "mint(address,uint256)": FunctionFragment;
    "proposalnum()": FunctionFragment;
    "proposals(uint256)": FunctionFragment;
    "propose(uint256)": FunctionFragment;
    "r1()": FunctionFragment;
    "r2()": FunctionFragment;
    "r3()": FunctionFragment;
    "refreshA()": FunctionFragment;
    "refreshw()": FunctionFragment;
    "registrationnum()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "voteRanking(uint256,uint256)": FunctionFragment;
    "voteRegister(uint256,bool)": FunctionFragment;
    "votedarticles(address,uint256)": FunctionFragment;
    "wVoteParticipate(uint256,uint256)": FunctionFragment;
    "writerRegister(string)": FunctionFragment;
    "writerRegistrations(uint256)": FunctionFragment;
    "writermapping(address)": FunctionFragment;
    "writers(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ARTICLEREGISTRATIONEXPIRY"
      | "CHALLEGEEXPIRY"
      | "DECIMALS"
      | "PARTICIPATIONEXPIRY"
      | "REGISTRATIONDEPOSIT"
      | "VOTINGEXPIRY"
      | "_pi_quorum"
      | "aVoteParticipate"
      | "allowance"
      | "approve"
      | "articleRegister"
      | "articles"
      | "balanceOf"
      | "canclaima"
      | "canclaimw"
      | "challenge"
      | "change"
      | "claimRewardA"
      | "claimRewardW"
      | "claimW"
      | "decimals"
      | "getProposal"
      | "getWregister"
      | "getarticle"
      | "getarticlenum"
      | "getproposalnum"
      | "getregisternum"
      | "members"
      | "mint"
      | "proposalnum"
      | "proposals"
      | "propose"
      | "r1"
      | "r2"
      | "r3"
      | "refreshA"
      | "refreshw"
      | "registrationnum"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "voteRanking"
      | "voteRegister"
      | "votedarticles"
      | "wVoteParticipate"
      | "writerRegister"
      | "writerRegistrations"
      | "writermapping"
      | "writers"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ARTICLEREGISTRATIONEXPIRY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CHALLEGEEXPIRY",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "DECIMALS", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "PARTICIPATIONEXPIRY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REGISTRATIONDEPOSIT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VOTINGEXPIRY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_pi_quorum",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "aVoteParticipate",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "articleRegister",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "articles",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "canclaima",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "canclaimw",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "challenge",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "change",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewardA",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewardW",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimW",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getProposal",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getWregister",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getarticle",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getarticlenum",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getproposalnum",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getregisternum",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "members",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalnum",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "propose",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "r1", values?: undefined): string;
  encodeFunctionData(functionFragment: "r2", values?: undefined): string;
  encodeFunctionData(functionFragment: "r3", values?: undefined): string;
  encodeFunctionData(functionFragment: "refreshA", values?: undefined): string;
  encodeFunctionData(functionFragment: "refreshw", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registrationnum",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "voteRanking",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "voteRegister",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "votedarticles",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "wVoteParticipate",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "writerRegister",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "writerRegistrations",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "writermapping",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "writers",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "ARTICLEREGISTRATIONEXPIRY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CHALLEGEEXPIRY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "DECIMALS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "PARTICIPATIONEXPIRY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REGISTRATIONDEPOSIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VOTINGEXPIRY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_pi_quorum", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "aVoteParticipate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "articleRegister",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "articles", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "canclaima", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "canclaimw", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "challenge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "change", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimRewardA",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewardW",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimW", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWregister",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getarticle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getarticlenum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getproposalnum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getregisternum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "members", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposalnum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "propose", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "r1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "r2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "r3", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "refreshA", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "refreshw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registrationnum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voteRanking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voteRegister",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votedarticles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wVoteParticipate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "writerRegister",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "writerRegistrations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "writermapping",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "writers", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface Article_DAO extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: Article_DAOInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ARTICLEREGISTRATIONEXPIRY(overrides?: CallOverrides): Promise<[BigNumber]>;

    CHALLEGEEXPIRY(overrides?: CallOverrides): Promise<[BigNumber]>;

    DECIMALS(overrides?: CallOverrides): Promise<[BigNumber]>;

    PARTICIPATIONEXPIRY(overrides?: CallOverrides): Promise<[BigNumber]>;

    REGISTRATIONDEPOSIT(overrides?: CallOverrides): Promise<[BigNumber]>;

    VOTINGEXPIRY(overrides?: CallOverrides): Promise<[BigNumber]>;

    _pi_quorum(overrides?: CallOverrides): Promise<[BigNumber]>;

    aVoteParticipate(
      proposalid: PromiseOrValue<BigNumberish>,
      stake: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    articleRegister(
      proposalid: PromiseOrValue<BigNumberish>,
      url: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    articles(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [Article_DAO.WriterStructOutput, BigNumber, string, BigNumber] & {
        writer: Article_DAO.WriterStructOutput;
        articleid: BigNumber;
        url: string;
        votedweights: BigNumber;
      }
    >;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    canclaima(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { can: boolean }>;

    canclaimw(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { can: boolean }>;

    challenge(
      wregisterid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    change(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimRewardA(
      proposalid: PromiseOrValue<BigNumberish>,
      articleid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimRewardW(
      wregisterid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimW(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    getProposal(
      pid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { state: BigNumber }>;

    getWregister(
      wid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { handle: string; state: BigNumber }>;

    getarticle(
      pid: PromiseOrValue<BigNumberish>,
      aid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { url: string }>;

    getarticlenum(
      pid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getproposalnum(overrides?: CallOverrides): Promise<[BigNumber]>;

    getregisternum(overrides?: CallOverrides): Promise<[BigNumber]>;

    members(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        _address: string;
        votes: BigNumber;
        challenges: BigNumber;
      }
    >;

    mint(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    proposalnum(overrides?: CallOverrides): Promise<[BigNumber]>;

    proposals(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        proposer: string;
        proposalid: BigNumber;
        applytime: BigNumber;
        proposerstake: BigNumber;
        totalstake: BigNumber;
        totalvotes: BigNumber;
        totalchallenges: BigNumber;
        totalweights: BigNumber;
        votingState: BigNumber;
      }
    >;

    propose(
      stake: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    r1(overrides?: CallOverrides): Promise<[BigNumber]>;

    r2(overrides?: CallOverrides): Promise<[BigNumber]>;

    r3(overrides?: CallOverrides): Promise<[BigNumber]>;

    refreshA(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    refreshw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registrationnum(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    voteRanking(
      proposalid: PromiseOrValue<BigNumberish>,
      articleid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    voteRegister(
      wRegisterID: PromiseOrValue<BigNumberish>,
      voteFor: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    votedarticles(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    wVoteParticipate(
      wregisterid: PromiseOrValue<BigNumberish>,
      stake: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    writerRegister(
      twitterhandle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    writerRegistrations(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        Article_DAO.WriterStructOutput,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        writer: Article_DAO.WriterStructOutput;
        wregistraionid: BigNumber;
        applytime: BigNumber;
        voteFor: BigNumber;
        voteAgainst: BigNumber;
        voteForstake: BigNumber;
        voteAgainststake: BigNumber;
        totalstake: BigNumber;
        totalvotes: BigNumber;
        totalchallenges: BigNumber;
        votingstate: BigNumber;
      }
    >;

    writermapping(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, string] & { _address: string; twitterHandle: string }>;

    writers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  ARTICLEREGISTRATIONEXPIRY(overrides?: CallOverrides): Promise<BigNumber>;

  CHALLEGEEXPIRY(overrides?: CallOverrides): Promise<BigNumber>;

  DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

  PARTICIPATIONEXPIRY(overrides?: CallOverrides): Promise<BigNumber>;

  REGISTRATIONDEPOSIT(overrides?: CallOverrides): Promise<BigNumber>;

  VOTINGEXPIRY(overrides?: CallOverrides): Promise<BigNumber>;

  _pi_quorum(overrides?: CallOverrides): Promise<BigNumber>;

  aVoteParticipate(
    proposalid: PromiseOrValue<BigNumberish>,
    stake: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  allowance(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  articleRegister(
    proposalid: PromiseOrValue<BigNumberish>,
    url: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  articles(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [Article_DAO.WriterStructOutput, BigNumber, string, BigNumber] & {
      writer: Article_DAO.WriterStructOutput;
      articleid: BigNumber;
      url: string;
      votedweights: BigNumber;
    }
  >;

  balanceOf(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  canclaima(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  canclaimw(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  challenge(
    wregisterid: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  change(
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimRewardA(
    proposalid: PromiseOrValue<BigNumberish>,
    articleid: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimRewardW(
    wregisterid: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimW(
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  getProposal(
    pid: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getWregister(
    wid: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { handle: string; state: BigNumber }>;

  getarticle(
    pid: PromiseOrValue<BigNumberish>,
    aid: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getarticlenum(
    pid: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getproposalnum(overrides?: CallOverrides): Promise<BigNumber>;

  getregisternum(overrides?: CallOverrides): Promise<BigNumber>;

  members(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      _address: string;
      votes: BigNumber;
      challenges: BigNumber;
    }
  >;

  mint(
    account: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  proposalnum(overrides?: CallOverrides): Promise<BigNumber>;

  proposals(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      proposer: string;
      proposalid: BigNumber;
      applytime: BigNumber;
      proposerstake: BigNumber;
      totalstake: BigNumber;
      totalvotes: BigNumber;
      totalchallenges: BigNumber;
      totalweights: BigNumber;
      votingState: BigNumber;
    }
  >;

  propose(
    stake: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  r1(overrides?: CallOverrides): Promise<BigNumber>;

  r2(overrides?: CallOverrides): Promise<BigNumber>;

  r3(overrides?: CallOverrides): Promise<BigNumber>;

  refreshA(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  refreshw(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registrationnum(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  voteRanking(
    proposalid: PromiseOrValue<BigNumberish>,
    articleid: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  voteRegister(
    wRegisterID: PromiseOrValue<BigNumberish>,
    voteFor: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  votedarticles(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  wVoteParticipate(
    wregisterid: PromiseOrValue<BigNumberish>,
    stake: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  writerRegister(
    twitterhandle: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  writerRegistrations(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      Article_DAO.WriterStructOutput,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      writer: Article_DAO.WriterStructOutput;
      wregistraionid: BigNumber;
      applytime: BigNumber;
      voteFor: BigNumber;
      voteAgainst: BigNumber;
      voteForstake: BigNumber;
      voteAgainststake: BigNumber;
      totalstake: BigNumber;
      totalvotes: BigNumber;
      totalchallenges: BigNumber;
      votingstate: BigNumber;
    }
  >;

  writermapping(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[string, string] & { _address: string; twitterHandle: string }>;

  writers(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    ARTICLEREGISTRATIONEXPIRY(overrides?: CallOverrides): Promise<BigNumber>;

    CHALLEGEEXPIRY(overrides?: CallOverrides): Promise<BigNumber>;

    DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    PARTICIPATIONEXPIRY(overrides?: CallOverrides): Promise<BigNumber>;

    REGISTRATIONDEPOSIT(overrides?: CallOverrides): Promise<BigNumber>;

    VOTINGEXPIRY(overrides?: CallOverrides): Promise<BigNumber>;

    _pi_quorum(overrides?: CallOverrides): Promise<BigNumber>;

    aVoteParticipate(
      proposalid: PromiseOrValue<BigNumberish>,
      stake: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    articleRegister(
      proposalid: PromiseOrValue<BigNumberish>,
      url: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    articles(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [Article_DAO.WriterStructOutput, BigNumber, string, BigNumber] & {
        writer: Article_DAO.WriterStructOutput;
        articleid: BigNumber;
        url: string;
        votedweights: BigNumber;
      }
    >;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canclaima(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    canclaimw(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    challenge(
      wregisterid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    change(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimRewardA(
      proposalid: PromiseOrValue<BigNumberish>,
      articleid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimRewardW(
      wregisterid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimW(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    getProposal(
      pid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWregister(
      wid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { handle: string; state: BigNumber }>;

    getarticle(
      pid: PromiseOrValue<BigNumberish>,
      aid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getarticlenum(
      pid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getproposalnum(overrides?: CallOverrides): Promise<BigNumber>;

    getregisternum(overrides?: CallOverrides): Promise<BigNumber>;

    members(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        _address: string;
        votes: BigNumber;
        challenges: BigNumber;
      }
    >;

    mint(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    proposalnum(overrides?: CallOverrides): Promise<BigNumber>;

    proposals(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        proposer: string;
        proposalid: BigNumber;
        applytime: BigNumber;
        proposerstake: BigNumber;
        totalstake: BigNumber;
        totalvotes: BigNumber;
        totalchallenges: BigNumber;
        totalweights: BigNumber;
        votingState: BigNumber;
      }
    >;

    propose(
      stake: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    r1(overrides?: CallOverrides): Promise<BigNumber>;

    r2(overrides?: CallOverrides): Promise<BigNumber>;

    r3(overrides?: CallOverrides): Promise<BigNumber>;

    refreshA(overrides?: CallOverrides): Promise<void>;

    refreshw(overrides?: CallOverrides): Promise<void>;

    registrationnum(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    voteRanking(
      proposalid: PromiseOrValue<BigNumberish>,
      articleid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    voteRegister(
      wRegisterID: PromiseOrValue<BigNumberish>,
      voteFor: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    votedarticles(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    wVoteParticipate(
      wregisterid: PromiseOrValue<BigNumberish>,
      stake: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    writerRegister(
      twitterhandle: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    writerRegistrations(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        Article_DAO.WriterStructOutput,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        writer: Article_DAO.WriterStructOutput;
        wregistraionid: BigNumber;
        applytime: BigNumber;
        voteFor: BigNumber;
        voteAgainst: BigNumber;
        voteForstake: BigNumber;
        voteAgainststake: BigNumber;
        totalstake: BigNumber;
        totalvotes: BigNumber;
        totalchallenges: BigNumber;
        votingstate: BigNumber;
      }
    >;

    writermapping(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, string] & { _address: string; twitterHandle: string }>;

    writers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;

    "Transfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;
  };

  estimateGas: {
    ARTICLEREGISTRATIONEXPIRY(overrides?: CallOverrides): Promise<BigNumber>;

    CHALLEGEEXPIRY(overrides?: CallOverrides): Promise<BigNumber>;

    DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    PARTICIPATIONEXPIRY(overrides?: CallOverrides): Promise<BigNumber>;

    REGISTRATIONDEPOSIT(overrides?: CallOverrides): Promise<BigNumber>;

    VOTINGEXPIRY(overrides?: CallOverrides): Promise<BigNumber>;

    _pi_quorum(overrides?: CallOverrides): Promise<BigNumber>;

    aVoteParticipate(
      proposalid: PromiseOrValue<BigNumberish>,
      stake: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    articleRegister(
      proposalid: PromiseOrValue<BigNumberish>,
      url: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    articles(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canclaima(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canclaimw(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    challenge(
      wregisterid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    change(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimRewardA(
      proposalid: PromiseOrValue<BigNumberish>,
      articleid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimRewardW(
      wregisterid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimW(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    getProposal(
      pid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWregister(
      wid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getarticle(
      pid: PromiseOrValue<BigNumberish>,
      aid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getarticlenum(
      pid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getproposalnum(overrides?: CallOverrides): Promise<BigNumber>;

    getregisternum(overrides?: CallOverrides): Promise<BigNumber>;

    members(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    proposalnum(overrides?: CallOverrides): Promise<BigNumber>;

    proposals(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    propose(
      stake: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    r1(overrides?: CallOverrides): Promise<BigNumber>;

    r2(overrides?: CallOverrides): Promise<BigNumber>;

    r3(overrides?: CallOverrides): Promise<BigNumber>;

    refreshA(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    refreshw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registrationnum(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    voteRanking(
      proposalid: PromiseOrValue<BigNumberish>,
      articleid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    voteRegister(
      wRegisterID: PromiseOrValue<BigNumberish>,
      voteFor: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    votedarticles(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    wVoteParticipate(
      wregisterid: PromiseOrValue<BigNumberish>,
      stake: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    writerRegister(
      twitterhandle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    writerRegistrations(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    writermapping(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    writers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ARTICLEREGISTRATIONEXPIRY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CHALLEGEEXPIRY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DECIMALS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PARTICIPATIONEXPIRY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    REGISTRATIONDEPOSIT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    VOTINGEXPIRY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _pi_quorum(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    aVoteParticipate(
      proposalid: PromiseOrValue<BigNumberish>,
      stake: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    articleRegister(
      proposalid: PromiseOrValue<BigNumberish>,
      url: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    articles(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canclaima(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canclaimw(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    challenge(
      wregisterid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    change(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimRewardA(
      proposalid: PromiseOrValue<BigNumberish>,
      articleid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimRewardW(
      wregisterid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimW(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getProposal(
      pid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWregister(
      wid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getarticle(
      pid: PromiseOrValue<BigNumberish>,
      aid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getarticlenum(
      pid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getproposalnum(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getregisternum(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    members(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    proposalnum(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposals(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    propose(
      stake: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    r1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    r2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    r3(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    refreshA(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    refreshw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registrationnum(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    voteRanking(
      proposalid: PromiseOrValue<BigNumberish>,
      articleid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    voteRegister(
      wRegisterID: PromiseOrValue<BigNumberish>,
      voteFor: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    votedarticles(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    wVoteParticipate(
      wregisterid: PromiseOrValue<BigNumberish>,
      stake: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    writerRegister(
      twitterhandle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    writerRegistrations(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    writermapping(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    writers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
